{"version":3,"sources":["../node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterLife.js","../node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterRate.js","../node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterShapeReplace.js","../node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterShape.js","../node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/Emitter.js","../node_modules/@tsparticles/plugin-emitters/browser/Options/Classes/EmitterSize.js","../node_modules/@tsparticles/plugin-emitters/browser/EmittersPlugin.js"],"names":["EmitterLife","constructor","this","wait","load","data","undefined","count","delay","setRangeValue","duration","EmitterRate","quantity","EmitterShapeReplace","color","opacity","EmitterShape","options","replace","type","_data$options","deepExtend","Emitter","autoPlay","fill","life","rate","shape","startCount","size","EmitterSize","direction","domId","name","particles","executeOnSingleOrMultiple","position","x","y","spawnColor","AnimatableColor","mode","height","width","EmittersPlugin","engine","_engine","id","getPlugin","container","Emitters","loadOptions","source","_source$interactivity","needsPlugin","emitters","emitter","tmp","interactivityEmitters","interactivity","modes","isArray","random","enable","value","map","s","emitterMode","defaultCount","_emitterMode$random$c","_emitterMode$random$e","_emitterMode$random$c2","_emitterMode$random$e2","_options$interactivit","length","events","onClick","isInArray"],"mappings":"kLACO,MAAMA,EACTC,cACIC,KAAKC,MAAO,CAChB,CACAC,KAAKC,GACIA,SAGcC,IAAfD,EAAKE,QACLL,KAAKK,MAAQF,EAAKE,YAEHD,IAAfD,EAAKG,QACLN,KAAKM,MAAQC,aAAcJ,EAAKG,aAEdF,IAAlBD,EAAKK,WACLR,KAAKQ,SAAWD,aAAcJ,EAAKK,gBAErBJ,IAAdD,EAAKF,OACLD,KAAKC,KAAOE,EAAKF,MAEzB,ECpBG,MAAMQ,EACTV,cACIC,KAAKU,SAAW,EAChBV,KAAKM,MAAQ,EACjB,CACAJ,KAAKC,QACYC,IAATD,SAGkBC,IAAlBD,EAAKO,WACLV,KAAKU,SAAWH,aAAcJ,EAAKO,gBAEpBN,IAAfD,EAAKG,QACLN,KAAKM,MAAQC,aAAcJ,EAAKG,QAExC,EChBG,MAAMK,EACTZ,cACIC,KAAKY,OAAQ,EACbZ,KAAKa,SAAU,CACnB,CACAX,KAAKC,GACIA,SAGcC,IAAfD,EAAKS,QACLZ,KAAKY,MAAQT,EAAKS,YAEDR,IAAjBD,EAAKU,UACLb,KAAKa,QAAUV,EAAKU,SAE5B,ECbG,MAAMC,EACTf,cACIC,KAAKe,QAAU,CAAC,EAChBf,KAAKgB,QAAU,IAAIL,EACnBX,KAAKiB,KAAO,QAChB,CACAf,KAAKC,GACD,GAAKA,EAAL,CAGgC,IAAAe,EAAhC,QAAqBd,IAAjBD,EAAKY,QACLf,KAAKe,QAAUI,YAAW,CAAC,EAAe,QAAdD,EAAEf,EAAKY,eAAO,IAAAG,IAAI,CAAC,GAEnDlB,KAAKgB,QAAQd,KAAKC,EAAKa,cACLZ,IAAdD,EAAKc,OACLjB,KAAKiB,KAAOd,EAAKc,KANrB,CAQJ,E,aCdG,MAAMG,EACTrB,cACIC,KAAKqB,UAAW,EAChBrB,KAAKsB,MAAO,EACZtB,KAAKuB,KAAO,IAAIzB,EAChBE,KAAKwB,KAAO,IAAIf,EAChBT,KAAKyB,MAAQ,IAAIX,EACjBd,KAAK0B,WAAa,CACtB,CACAxB,KAAKC,GACIA,SAGiBC,IAAlBD,EAAKkB,WACLrB,KAAKqB,SAAWlB,EAAKkB,eAEPjB,IAAdD,EAAKwB,OACA3B,KAAK2B,OACN3B,KAAK2B,KAAO,IAAIC,KAEpB5B,KAAK2B,KAAKzB,KAAKC,EAAKwB,YAEDvB,IAAnBD,EAAK0B,YACL7B,KAAK6B,UAAY1B,EAAK0B,WAE1B7B,KAAK8B,MAAQ3B,EAAK2B,WACA1B,IAAdD,EAAKmB,OACLtB,KAAKsB,KAAOnB,EAAKmB,MAErBtB,KAAKuB,KAAKrB,KAAKC,EAAKoB,MACpBvB,KAAK+B,KAAO5B,EAAK4B,KACjB/B,KAAKgC,UAAYC,YAA0B9B,EAAK6B,WAAYA,GACjDb,YAAW,CAAC,EAAGa,KAE1BhC,KAAKwB,KAAKtB,KAAKC,EAAKqB,MACpBxB,KAAKyB,MAAMvB,KAAKC,EAAKsB,YACCrB,IAAlBD,EAAK+B,WACLlC,KAAKkC,SAAW,CAAC,OACO9B,IAApBD,EAAK+B,SAASC,IACdnC,KAAKkC,SAASC,EAAI5B,aAAcJ,EAAK+B,SAASC,SAE1B/B,IAApBD,EAAK+B,SAASE,IACdpC,KAAKkC,SAASE,EAAI7B,aAAcJ,EAAK+B,SAASE,UAG9BhC,IAApBD,EAAKkC,kBACmBjC,IAApBJ,KAAKqC,aACLrC,KAAKqC,WAAa,IAAIC,KAE1BtC,KAAKqC,WAAWnC,KAAKC,EAAKkC,kBAENjC,IAApBD,EAAKuB,aACL1B,KAAK0B,WAAavB,EAAKuB,YAE/B,E,mCC3DJ,kCAAO,MAAME,EACT7B,cACIC,KAAKuC,KAAO,UACZvC,KAAKwC,OAAS,EACdxC,KAAKyC,MAAQ,CACjB,CACAvC,KAAKC,QACYC,IAATD,SAGcC,IAAdD,EAAKoC,OACLvC,KAAKuC,KAAOpC,EAAKoC,WAEDnC,IAAhBD,EAAKqC,SACLxC,KAAKwC,OAASrC,EAAKqC,aAEJpC,IAAfD,EAAKsC,QACLzC,KAAKyC,MAAQtC,EAAKsC,OAE1B,E,mCCnBJ,2EAEO,MAAMC,EACT3C,YAAY4C,GACR3C,KAAK4C,QAAUD,EACf3C,KAAK6C,GAAK,UACd,CACA,eAAMC,CAAUC,GACZ,MAAM,SAAEC,SAAmB,+BAC3B,OAAO,IAAIA,EAAShD,KAAK4C,QAASG,EACtC,CACAE,YAAYlC,EAASmC,GAAQ,IAAAC,EACzB,IAAKnD,KAAKoD,YAAYrC,KAAaf,KAAKoD,YAAYF,GAChD,OAEM,OAANA,QAAM,IAANA,KAAQG,WACRtC,EAAQsC,SAAWpB,YAA0BiB,EAAOG,UAAWC,IAC3D,MAAMC,EAAM,IAAInC,UAEhB,OADAmC,EAAIrD,KAAKoD,GACFC,CAAG,KAGlB,MAAMC,EAA8B,OAANN,QAAM,IAANA,GAAqB,QAAfC,EAAND,EAAQO,qBAAa,IAAAN,GAAO,QAAPA,EAArBA,EAAuBO,aAAK,IAAAP,OAAA,EAA5BA,EAA8BE,SAC5D,GAAIG,EACA,GAAIG,YAAQH,GACRzC,EAAQ0C,cAAcC,MAAML,SAAW,CACnCO,OAAQ,CACJvD,MAAO,EACPwD,QAAQ,GAEZC,MAAON,EAAsBO,KAAKC,IAC9B,MAAMT,EAAM,IAAInC,UAEhB,OADAmC,EAAIrD,KAAK8D,GACFT,CAAG,SAIjB,CACD,MAAMU,EAAcT,EACpB,QAA0BpD,IAAtB6D,EAAYH,MAAqB,CACjC,MAAMI,EAAe,EACrB,GAAIP,YAAQM,EAAYH,OAAQ,KAAAK,EAAAC,EAC5BrD,EAAQ0C,cAAcC,MAAML,SAAW,CACnCO,OAAQ,CACJvD,MAA+B,QAA1B8D,EAAEF,EAAYL,OAAOvD,aAAK,IAAA8D,IAAID,EACnCL,OAAiC,QAA3BO,EAAEH,EAAYL,OAAOC,cAAM,IAAAO,MAErCN,MAAOG,EAAYH,MAAMC,KAAKC,IAC1B,MAAMT,EAAM,IAAInC,UAEhB,OADAmC,EAAIrD,KAAK8D,GACFT,CAAG,IAGtB,KACK,KAAAc,EAAAC,EACD,MAAMf,EAAM,IAAInC,UAChBmC,EAAIrD,KAAK+D,EAAYH,OACrB/C,EAAQ0C,cAAcC,MAAML,SAAW,CACnCO,OAAQ,CACJvD,MAA+B,QAA1BgE,EAAEJ,EAAYL,OAAOvD,aAAK,IAAAgE,IAAIH,EACnCL,OAAiC,QAA3BS,EAAEL,EAAYL,OAAOC,cAAM,IAAAS,MAErCR,MAAOP,EAEf,CACJ,KACK,EACuBxC,EAAQ0C,cAAcC,MAAML,SAAW,CAC3DO,OAAQ,CACJvD,MAAO,EACPwD,QAAQ,GAEZC,MAAO,IAAI1C,YAEA0C,MAAM5D,KAAKsD,EAC9B,CACJ,CAER,CACAJ,YAAYrC,GAAS,IAAAwD,EACjB,IAAKxD,EACD,OAAO,EAEX,MAAMsC,EAAWtC,EAAQsC,SACzB,OAASM,YAAQN,MAAeA,EAASmB,aACxBpE,IAAbiD,KACwB,QAAtBkB,EAACxD,EAAQ0C,qBAAa,IAAAc,GAAQ,QAARA,EAArBA,EAAuBE,cAAM,IAAAF,GAAS,QAATA,EAA7BA,EAA+BG,eAAO,IAAAH,IAAtCA,EAAwChC,OACvCoC,YAAU,UAAW5D,EAAQ0C,cAAcgB,OAAOC,QAAQnC,KACtE,E","file":"static/js/21.8da0f870.chunk.js","sourcesContent":["import { setRangeValue } from \"@tsparticles/engine\";\nexport class EmitterLife {\n    constructor() {\n        this.wait = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n        if (data.duration !== undefined) {\n            this.duration = setRangeValue(data.duration);\n        }\n        if (data.wait !== undefined) {\n            this.wait = data.wait;\n        }\n    }\n}\n","import { setRangeValue } from \"@tsparticles/engine\";\nexport class EmitterRate {\n    constructor() {\n        this.quantity = 1;\n        this.delay = 0.1;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.quantity !== undefined) {\n            this.quantity = setRangeValue(data.quantity);\n        }\n        if (data.delay !== undefined) {\n            this.delay = setRangeValue(data.delay);\n        }\n    }\n}\n","export class EmitterShapeReplace {\n    constructor() {\n        this.color = false;\n        this.opacity = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = data.color;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n","import { deepExtend } from \"@tsparticles/engine\";\nimport { EmitterShapeReplace } from \"./EmitterShapeReplace.js\";\nexport class EmitterShape {\n    constructor() {\n        this.options = {};\n        this.replace = new EmitterShapeReplace();\n        this.type = \"square\";\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.options !== undefined) {\n            this.options = deepExtend({}, data.options ?? {});\n        }\n        this.replace.load(data.replace);\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n","import { AnimatableColor, deepExtend, executeOnSingleOrMultiple, setRangeValue, } from \"@tsparticles/engine\";\nimport { EmitterLife } from \"./EmitterLife.js\";\nimport { EmitterRate } from \"./EmitterRate.js\";\nimport { EmitterShape } from \"./EmitterShape.js\";\nimport { EmitterSize } from \"./EmitterSize.js\";\nexport class Emitter {\n    constructor() {\n        this.autoPlay = true;\n        this.fill = true;\n        this.life = new EmitterLife();\n        this.rate = new EmitterRate();\n        this.shape = new EmitterShape();\n        this.startCount = 0;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.autoPlay !== undefined) {\n            this.autoPlay = data.autoPlay;\n        }\n        if (data.size !== undefined) {\n            if (!this.size) {\n                this.size = new EmitterSize();\n            }\n            this.size.load(data.size);\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.domId = data.domId;\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        this.life.load(data.life);\n        this.name = data.name;\n        this.particles = executeOnSingleOrMultiple(data.particles, (particles) => {\n            return deepExtend({}, particles);\n        });\n        this.rate.load(data.rate);\n        this.shape.load(data.shape);\n        if (data.position !== undefined) {\n            this.position = {};\n            if (data.position.x !== undefined) {\n                this.position.x = setRangeValue(data.position.x);\n            }\n            if (data.position.y !== undefined) {\n                this.position.y = setRangeValue(data.position.y);\n            }\n        }\n        if (data.spawnColor !== undefined) {\n            if (this.spawnColor === undefined) {\n                this.spawnColor = new AnimatableColor();\n            }\n            this.spawnColor.load(data.spawnColor);\n        }\n        if (data.startCount !== undefined) {\n            this.startCount = data.startCount;\n        }\n    }\n}\n","export class EmitterSize {\n    constructor() {\n        this.mode = \"percent\";\n        this.height = 0;\n        this.width = 0;\n    }\n    load(data) {\n        if (data === undefined) {\n            return;\n        }\n        if (data.mode !== undefined) {\n            this.mode = data.mode;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n","import { executeOnSingleOrMultiple, isArray, isInArray, } from \"@tsparticles/engine\";\nimport { Emitter } from \"./Options/Classes/Emitter.js\";\nexport class EmittersPlugin {\n    constructor(engine) {\n        this._engine = engine;\n        this.id = \"emitters\";\n    }\n    async getPlugin(container) {\n        const { Emitters } = await import(\"./Emitters.js\");\n        return new Emitters(this._engine, container);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.emitters) {\n            options.emitters = executeOnSingleOrMultiple(source.emitters, (emitter) => {\n                const tmp = new Emitter();\n                tmp.load(emitter);\n                return tmp;\n            });\n        }\n        const interactivityEmitters = source?.interactivity?.modes?.emitters;\n        if (interactivityEmitters) {\n            if (isArray(interactivityEmitters)) {\n                options.interactivity.modes.emitters = {\n                    random: {\n                        count: 1,\n                        enable: true,\n                    },\n                    value: interactivityEmitters.map((s) => {\n                        const tmp = new Emitter();\n                        tmp.load(s);\n                        return tmp;\n                    }),\n                };\n            }\n            else {\n                const emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                    const defaultCount = 1;\n                    if (isArray(emitterMode.value)) {\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? defaultCount,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: emitterMode.value.map((s) => {\n                                const tmp = new Emitter();\n                                tmp.load(s);\n                                return tmp;\n                            }),\n                        };\n                    }\n                    else {\n                        const tmp = new Emitter();\n                        tmp.load(emitterMode.value);\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? defaultCount,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: tmp,\n                        };\n                    }\n                }\n                else {\n                    const emitterOptions = (options.interactivity.modes.emitters = {\n                        random: {\n                            count: 1,\n                            enable: false,\n                        },\n                        value: new Emitter(),\n                    });\n                    emitterOptions.value.load(interactivityEmitters);\n                }\n            }\n        }\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const emitters = options.emitters;\n        return ((isArray(emitters) && !!emitters.length) ||\n            emitters !== undefined ||\n            (!!options.interactivity?.events?.onClick?.mode &&\n                isInArray(\"emitter\", options.interactivity.events.onClick.mode)));\n    }\n}\n"],"sourceRoot":""}