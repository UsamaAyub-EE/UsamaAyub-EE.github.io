{"version":3,"sources":["../node_modules/@tsparticles/plugin-emitters/browser/EmitterShapeBase.js","../node_modules/@tsparticles/plugin-emitters/browser/index.js","../node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShape.js","../node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShapeGenerator.js"],"names":["EmitterShapeBase","constructor","position","size","fill","options","this","resize","async","loadEmittersPlugin","engine","refresh","arguments","length","undefined","emitterShapeManager","ShapeManager","addEmitterShapeGenerator","name","generator","_engine$emitterShapeM","addShapeGenerator","EmittersPlugin","plugin","addPlugin","quarter","doublePI","Math","PI","EmittersCircleShape","super","init","randomPosition","a","b","width","height","randomTheta","generateTheta","x","y","u","getRandom","theta","atan","tan","v","double","maxRadius","sqrt","cos","sin","randomRadius","radius","Promise","resolve","EmittersCircleShapeGenerator","generate"],"mappings":"qOAAO,MAAMA,EACTC,YAAYC,EAAUC,EAAMC,EAAMC,GAC9BC,KAAKJ,SAAWA,EAChBI,KAAKH,KAAOA,EACZG,KAAKF,KAAOA,EACZE,KAAKD,QAAUA,CACnB,CACAE,OAAOL,EAAUC,GACbG,KAAKJ,SAAWA,EAChBI,KAAKH,KAAOA,CAChB,ECVGK,eAAeC,EAAmBC,GAAwB,IAAhBC,IAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACpD,IAAKF,EAAOK,oBAAqB,CAC7B,MAAM,aAAEC,SAAuB,+BAC/BN,EAAOK,oBAAsB,IAAIC,EAAaN,EAClD,CACKA,EAAOO,2BACRP,EAAOO,yBAA2B,CAACC,EAAMC,KAAc,IAAAC,EACzB,QAA1BA,EAAAV,EAAOK,2BAAmB,IAAAK,GAA1BA,EAA4BC,kBAAkBH,EAAMC,EAAU,GAGtE,MAAM,eAAEG,SAAyB,+BAA+BC,EAAS,IAAID,EAAeZ,SACtFA,EAAOc,UAAUD,EAAQZ,EACnC,C,4HCVA,MAAMc,EAAU,IAAkBC,EAAH,EAAcC,KAAKC,GAC3C,MAAMC,UAA4B7B,mBACrCC,YAAYC,EAAUC,EAAMC,EAAMC,GAC9ByB,MAAM5B,EAAUC,EAAMC,EAAMC,EAChC,CACA,UAAM0B,GACN,CACA,oBAAMC,GACF,MAAM7B,EAAOG,KAAKH,KAAMC,EAAOE,KAAKF,KAAMF,EAAWI,KAAKJ,UAckE+B,EAAGC,GAAK,CAtBvD,GAsBwD/B,EAAKgC,MAtB7D,GAsB2EhC,EAAKiC,QAAgBC,EAdzFC,EAACC,EAAGC,KACpF,MAAMC,EAAIC,cAAcjB,EAASkB,EAAQhB,KAAKiB,KAAMJ,EAAID,EAAKZ,KAAKkB,IAAInB,EAAWe,IAAKK,EAAIJ,cAC1F,OAAII,EAAIrB,EACGkB,EAEFG,EAAIC,GACFpB,KAAKC,GAAKe,EAEZG,EAAIC,IACFpB,KAAKC,GAAKe,GAGTA,CACZ,EACuLL,CAAcL,EAAGC,GAAIc,GAA7LL,EAAsNN,GAA5NE,EAAsNN,IAAnNO,EAAsNN,GAA/LP,KAAKsB,MAAMT,EAAIb,KAAKuB,IAAIP,KAtBI,GAsBoBJ,EAAIZ,KAAKwB,IAAIR,KAtBjC,IAsBoLS,EAAehD,EAAO4C,EAAYrB,KAAKsB,KAAKP,eAAeM,EAAtSK,IAACd,EAAGC,EAAGG,EACnB,OAAOW,QAAQC,QAAQ,CACnBrD,SAAU,CACNqC,EAAGrC,EAASqC,EAAIa,EAAezB,KAAKuB,IAAIb,GACxCG,EAAGtC,EAASsC,EAAIY,EAAezB,KAAKwB,IAAId,KAGpD,EC9BG,MAAMmB,EACTC,SAASvD,EAAUC,EAAMC,EAAMC,GAC3B,OAAO,IAAIwB,EAAoB3B,EAAUC,EAAMC,EAAMC,EACzD,E","file":"static/js/30.7af0b2e2.chunk.js","sourcesContent":["export class EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        this.position = position;\n        this.size = size;\n        this.fill = fill;\n        this.options = options;\n    }\n    resize(position, size) {\n        this.position = position;\n        this.size = size;\n    }\n}\n","export async function loadEmittersPlugin(engine, refresh = true) {\n    if (!engine.emitterShapeManager) {\n        const { ShapeManager } = await import(\"./ShapeManager.js\");\n        engine.emitterShapeManager = new ShapeManager(engine);\n    }\n    if (!engine.addEmitterShapeGenerator) {\n        engine.addEmitterShapeGenerator = (name, generator) => {\n            engine.emitterShapeManager?.addShapeGenerator(name, generator);\n        };\n    }\n    const { EmittersPlugin } = await import(\"./EmittersPlugin.js\"), plugin = new EmittersPlugin(engine);\n    await engine.addPlugin(plugin, refresh);\n}\nexport * from \"./EmitterContainer.js\";\nexport * from \"./EmitterShapeBase.js\";\nexport * from \"./EmittersEngine.js\";\nexport * from \"./IEmitterShape.js\";\nexport * from \"./IEmitterShapeGenerator.js\";\nexport * from \"./Enums/EmitterClickMode.js\";\nexport * from \"./IRandomPositionData.js\";\n","import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom } from \"@tsparticles/engine\";\nconst quarter = 0.25, double = 2, doublePI = Math.PI * double, squareExp = 2, half = 0.5;\nexport class EmittersCircleShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    async randomPosition() {\n        const size = this.size, fill = this.fill, position = this.position, generateTheta = (x, y) => {\n            const u = getRandom() * quarter, theta = Math.atan((y / x) * Math.tan(doublePI * u)), v = getRandom();\n            if (v < quarter) {\n                return theta;\n            }\n            else if (v < double * quarter) {\n                return Math.PI - theta;\n            }\n            else if (v < double * quarter + quarter) {\n                return Math.PI + theta;\n            }\n            else {\n                return -theta;\n            }\n        }, radius = (x, y, theta) => (x * y) / Math.sqrt((y * Math.cos(theta)) ** squareExp + (x * Math.sin(theta)) ** squareExp), [a, b] = [size.width * half, size.height * half], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;\n        return Promise.resolve({\n            position: {\n                x: position.x + randomRadius * Math.cos(randomTheta),\n                y: position.y + randomRadius * Math.sin(randomTheta),\n            },\n        });\n    }\n}\n","import { EmittersCircleShape } from \"./EmittersCircleShape.js\";\nexport class EmittersCircleShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersCircleShape(position, size, fill, options);\n    }\n}\n"],"sourceRoot":""}