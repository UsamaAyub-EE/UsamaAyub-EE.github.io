{"version":3,"sources":["../node_modules/@tsparticles/interaction-particles-links/browser/CircleWarp.js"],"names":["CircleWarp","Circle","constructor","x","y","radius","canvasSize","super","this","contains","point","width","height","intersects","range","rect","circle","newPos","position","undefined","biggerCircle","size","rectSW","Rectangle"],"mappings":"uHAAA,8DAEO,MAAMA,UAAmBC,IAC5BC,YAAYC,EAAGC,EAAGC,EAAQC,GACtBC,MAAMJ,EAAGC,EAAGC,GACZG,KAAKF,WAAaA,EAClBE,KAAKF,WAAa,IAAKA,EAC3B,CACAG,SAASC,GACL,MAAM,MAAEC,EAAK,OAAEC,GAAWJ,KAAKF,YACzB,EAAEH,EAAC,EAAEC,GAAMM,EACjB,OAAQH,MAAME,SAASC,IACnBH,MAAME,SAAS,CAAEN,EAAGA,EAAIQ,EAAOP,OAC/BG,MAAME,SAAS,CAAEN,EAAGA,EAAIQ,EAAOP,EAAGA,EAAIQ,KACtCL,MAAME,SAAS,CAAEN,IAAGC,EAAGA,EAAIQ,GACnC,CACAC,WAAWC,GACP,GAAIP,MAAMM,WAAWC,GACjB,OAAO,EAEX,MAAMC,EAAOD,EAAOE,EAASF,EAAOG,EAAS,CACzCd,EAAGW,EAAMI,SAASf,EAAIK,KAAKF,WAAWK,MACtCP,EAAGU,EAAMI,SAASd,EAAII,KAAKF,WAAWM,QAE1C,QAAsBO,IAAlBH,EAAOX,OAAsB,CAC7B,MAAMe,EAAe,IAAInB,IAAOgB,EAAOd,EAAGc,EAAOb,EAxB9C,EAwBiDY,EAAOX,QAC3D,OAAOE,MAAMM,WAAWO,EAC5B,CACK,QAAkBD,IAAdJ,EAAKM,KAAoB,CAC9B,MAAMC,EAAS,IAAIC,IAAUN,EAAOd,EAAGc,EAAOb,EA5B3C,EA4B8CW,EAAKM,KAAKV,MA5BxD,EA4BwEI,EAAKM,KAAKT,QACrF,OAAOL,MAAMM,WAAWS,EAC5B,CACA,OAAO,CACX,E","file":"static/js/58.dd9c2281.chunk.js","sourcesContent":["import { Circle, Rectangle } from \"@tsparticles/engine\";\nconst double = 2;\nexport class CircleWarp extends Circle {\n    constructor(x, y, radius, canvasSize) {\n        super(x, y, radius);\n        this.canvasSize = canvasSize;\n        this.canvasSize = { ...canvasSize };\n    }\n    contains(point) {\n        const { width, height } = this.canvasSize;\n        const { x, y } = point;\n        return (super.contains(point) ||\n            super.contains({ x: x - width, y }) ||\n            super.contains({ x: x - width, y: y - height }) ||\n            super.contains({ x, y: y - height }));\n    }\n    intersects(range) {\n        if (super.intersects(range)) {\n            return true;\n        }\n        const rect = range, circle = range, newPos = {\n            x: range.position.x - this.canvasSize.width,\n            y: range.position.y - this.canvasSize.height,\n        };\n        if (circle.radius !== undefined) {\n            const biggerCircle = new Circle(newPos.x, newPos.y, circle.radius * double);\n            return super.intersects(biggerCircle);\n        }\n        else if (rect.size !== undefined) {\n            const rectSW = new Rectangle(newPos.x, newPos.y, rect.size.width * double, rect.size.height * double);\n            return super.intersects(rectSW);\n        }\n        return false;\n    }\n}\n"],"sourceRoot":""}