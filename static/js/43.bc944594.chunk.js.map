{"version":3,"sources":["../node_modules/@tsparticles/interaction-external-connect/browser/Utils.js","../node_modules/@tsparticles/interaction-external-connect/browser/Connector.js"],"names":["gradientMin","gradientMax","lineStyle","container","ctx","p1","p2","connectOptions","actualOptions","interactivity","modes","connect","context","opacity","gradStop","Math","floor","getRadius","color1","getFillColor","color2","sourcePos","getPosition","destPos","midRgb","colorMix","grad","createLinearGradient","x","y","addColorStop","getStyleFromHsl","clamp","getStyleFromRgb","gradient","links","drawConnection","canvas","draw","_p1$retina$linksWidth","ls","pos1","pos2","width","begin","end","retina","linksWidth","drawLine","lineWidth","strokeStyle","stroke","Connector","ExternalInteractorBase","constructor","super","clear","init","this","connectModeDistance","distance","pixelRatio","connectModeRadius","radius","interact","events","onHover","enable","status","mousePos","mouse","position","abs","query","particles","quadTree","queryCircle","p","isEnabled","forEach","i","slice","distMax","xDiff","yDiff","Promise","resolve","particle","_particle$interactivi","isInArray","mode","loadModeOptions","options","Connect","_len","arguments","length","sources","Array","_key","source","load","reset"],"mappings":"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","file":"static/js/43.bc944594.chunk.js","sourcesContent":["import { clamp, colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, } from \"@tsparticles/engine\";\nconst gradientMin = 0, gradientMax = 1, defaultLinksWidth = 0;\nexport function gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();\n    if (!color1 || !color2) {\n        return;\n    }\n    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(gradientMin, getStyleFromHsl(color1, opacity));\n    grad.addColorStop(clamp(gradStop, gradientMin, gradientMax), getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(gradientMax, getStyleFromHsl(color2, opacity));\n    return grad;\n}\nexport function drawConnectLine(context, width, lineStyle, begin, end) {\n    drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n}\nexport function lineStyle(container, ctx, p1, p2) {\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\n    if (!connectOptions) {\n        return;\n    }\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nexport function drawConnection(container, p1, p2) {\n    container.canvas.draw((ctx) => {\n        const ls = lineStyle(container, ctx, p1, p2);\n        if (!ls) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        drawConnectLine(ctx, p1.retina.linksWidth ?? defaultLinksWidth, ls, pos1, pos2);\n    });\n}\n","import { ExternalInteractorBase, isInArray, } from \"@tsparticles/engine\";\nimport { Connect } from \"./Options/Classes/Connect.js\";\nimport { drawConnection } from \"./Utils.js\";\nconst connectMode = \"connect\", minDistance = 0;\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    async interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n            const mousePos = container.interactivity.mouse.position, { connectModeDistance, connectModeRadius } = container.retina;\n            if (!connectModeDistance ||\n                connectModeDistance < minDistance ||\n                !connectModeRadius ||\n                connectModeRadius < minDistance ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, (p) => this.isEnabled(p));\n            query.forEach((p1, i) => {\n                const pos1 = p1.getPosition(), indexOffset = 1;\n                for (const p2 of query.slice(i + indexOffset)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n            });\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(connectMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source?.connect);\n        }\n    }\n    reset() {\n    }\n}\n"],"sourceRoot":""}