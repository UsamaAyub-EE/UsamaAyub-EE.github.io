{"version":3,"sources":["../node_modules/@tsparticles/interaction-external-attract/browser/Utils.js"],"names":["minFactor","identity","minRadius","processAttract","container","position","attractRadius","area","queryCb","attractOptions","actualOptions","interactivity","modes","attract","query","particles","quadTree","particle","dx","dy","distance","getDistances","velocity","speed","factor","attractFactor","clamp","getEasing","easing","maxSpeed","normVec","Vector","create","subFrom","clickAttract","enabledCb","finish","count","clicking","mousePos","mouse","clickPosition","retina","attractModeDistance","Circle","x","y","p","hoverAttract"],"mappings":"sHAAA,6GACA,MAAMA,EAAY,EAAGC,EAAW,EAAGC,EAAY,EAC/C,SAASC,EAAeC,EAAWC,EAAUC,EAAeC,EAAMC,GAC9D,MAAMC,EAAiBL,EAAUM,cAAcC,cAAcC,MAAMC,QACnE,IAAKJ,EACD,OAEJ,MAAMK,EAAQV,EAAUW,UAAUC,SAASF,MAAMP,EAAMC,GACvD,IAAK,MAAMS,KAAYH,EAAO,CAC1B,MAAM,GAAEI,EAAE,GAAEC,EAAE,SAAEC,GAAaC,YAAaJ,EAASZ,SAAUA,GAAWiB,EAAWb,EAAec,MAAQd,EAAee,OAAQC,EAAgBC,YAAMC,YAAUlB,EAAemB,OAAzBD,CAAiC1B,EAAWmB,EAAWd,GAAiBgB,EAAUtB,EAAWS,EAAeoB,UAAWC,EAAUC,IAAOC,OAAQZ,EAAuBF,EAAKE,EAAYK,EAA7BH,EAA6CF,EAAuBD,EAAKC,EAAYK,EAA7BH,GAC1WL,EAASZ,SAAS4B,QAAQH,EAC9B,CACJ,CACO,SAASI,EAAa9B,EAAW+B,GAC/B/B,EAAUS,UACXT,EAAUS,QAAU,CAAEE,UAAW,KAErC,MAAM,QAAEF,GAAYT,EAUpB,GATKS,EAAQuB,SACJvB,EAAQwB,QACTxB,EAAQwB,MAAQ,GAEpBxB,EAAQwB,QACJxB,EAAQwB,QAAUjC,EAAUW,UAAUsB,QACtCxB,EAAQuB,QAAS,IAGrBvB,EAAQyB,SAAU,CAClB,MAAMC,EAAWnC,EAAUO,cAAc6B,MAAMC,cAAenC,EAAgBF,EAAUsC,OAAOC,oBAC/F,IAAKrC,GAAiBA,EAAgBJ,IAAcqC,EAChD,OAEJpC,EAAeC,EAAWmC,EAAUjC,EAAe,IAAIsC,IAAOL,EAASM,EAAGN,EAASO,EAAGxC,IAAiByC,GAAMZ,EAAUY,IAC3H,MAC8B,IAArBlC,EAAQyB,WACbzB,EAAQE,UAAY,GAE5B,CACO,SAASiC,EAAa5C,EAAW+B,GACpC,MAAMI,EAAWnC,EAAUO,cAAc6B,MAAMnC,SAAUC,EAAgBF,EAAUsC,OAAOC,qBACrFrC,GAAiBA,EAAgBJ,IAAcqC,GAGpDpC,EAAeC,EAAWmC,EAAUjC,EAAe,IAAIsC,IAAOL,EAASM,EAAGN,EAASO,EAAGxC,IAAiByC,GAAMZ,EAAUY,IAC3H,C","file":"static/js/9.8f4b6bd9.chunk.js","sourcesContent":["import { Circle, Vector, clamp, getDistances, getEasing, } from \"@tsparticles/engine\";\nconst minFactor = 1, identity = 1, minRadius = 0;\nfunction processAttract(container, position, attractRadius, area, queryCb) {\n    const attractOptions = container.actualOptions.interactivity.modes.attract;\n    if (!attractOptions) {\n        return;\n    }\n    const query = container.particles.quadTree.query(area, queryCb);\n    for (const particle of query) {\n        const { dx, dy, distance } = getDistances(particle.position, position), velocity = attractOptions.speed * attractOptions.factor, attractFactor = clamp(getEasing(attractOptions.easing)(identity - distance / attractRadius) * velocity, minFactor, attractOptions.maxSpeed), normVec = Vector.create(!distance ? velocity : (dx / distance) * attractFactor, !distance ? velocity : (dy / distance) * attractFactor);\n        particle.position.subFrom(normVec);\n    }\n}\nexport function clickAttract(container, enabledCb) {\n    if (!container.attract) {\n        container.attract = { particles: [] };\n    }\n    const { attract } = container;\n    if (!attract.finish) {\n        if (!attract.count) {\n            attract.count = 0;\n        }\n        attract.count++;\n        if (attract.count === container.particles.count) {\n            attract.finish = true;\n        }\n    }\n    if (attract.clicking) {\n        const mousePos = container.interactivity.mouse.clickPosition, attractRadius = container.retina.attractModeDistance;\n        if (!attractRadius || attractRadius < minRadius || !mousePos) {\n            return;\n        }\n        processAttract(container, mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius), (p) => enabledCb(p));\n    }\n    else if (attract.clicking === false) {\n        attract.particles = [];\n    }\n}\nexport function hoverAttract(container, enabledCb) {\n    const mousePos = container.interactivity.mouse.position, attractRadius = container.retina.attractModeDistance;\n    if (!attractRadius || attractRadius < minRadius || !mousePos) {\n        return;\n    }\n    processAttract(container, mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius), (p) => enabledCb(p));\n}\n"],"sourceRoot":""}