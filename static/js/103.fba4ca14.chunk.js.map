{"version":3,"sources":["../node_modules/@tsparticles/updater-opacity/browser/OpacityUpdater.js"],"names":["OpacityUpdater","constructor","container","this","init","particle","opacityOptions","options","opacity","initParticleNumericAnimationValue","opacityAnimation","animation","enable","velocity","getRangeValue","speed","percentDenominator","retina","reduceFactor","sync","getRandom","Promise","resolve","isEnabled","_particle$opacity$max","_particle$opacity$max2","_particle$opacity$loo","_particle$opacity$max3","destroyed","spawning","maxLoops","loops","reset","time","update","delta","updateAnimation","destroy"],"mappings":"wHAAA,kEACO,MAAMA,EACTC,YAAYC,GACRC,KAAKD,UAAYA,CACrB,CACA,UAAME,CAAKC,GACP,MAAMC,EAAiBD,EAASE,QAAQC,QACxCH,EAASG,QAAUC,YAAkCH,EADM,GAE3D,MAAMI,EAAmBJ,EAAeK,UACpCD,EAAiBE,SACjBP,EAASG,QAAQK,SACZC,YAAcJ,EAAiBK,OAASC,KAAsBb,KAAKD,UAAUe,OAAOC,aACpFR,EAAiBS,OAClBd,EAASG,QAAQK,UAAYO,sBAG/BC,QAAQC,SAClB,CACAC,UAAUlB,GAAU,IAAAmB,EAAAC,EAAAC,EAAAC,EAEhB,OAAStB,EAASuB,YACbvB,EAASwB,YACRxB,EAASG,SACXH,EAASG,QAAQI,UACU,QAA1BY,EAACnB,EAASG,QAAQsB,gBAAQ,IAAAN,IALlB,QAMsB,QAA1BC,EAACpB,EAASG,QAAQsB,gBAAQ,IAAAL,IANtB,OAOsB,QAAvBC,EAACrB,EAASG,QAAQuB,aAAK,IAAAL,IAPtB,IAO4D,QAA9BC,EAAKtB,EAASG,QAAQsB,gBAAQ,IAAAH,IAP5D,GAQjB,CACAK,MAAM3B,GACEA,EAASG,UACTH,EAASG,QAAQyB,KAAO,EACxB5B,EAASG,QAAQuB,MAAQ,EAEjC,CACA,YAAMG,CAAO7B,EAAU8B,GACdhC,KAAKoB,UAAUlB,IAAcA,EAASG,UAG3C4B,aAAgB/B,EAAUA,EAASG,SAAS,EAAMH,EAASE,QAAQC,QAAQG,UAAU0B,QAASF,SACxFd,QAAQC,UAClB,E","file":"static/js/103.fba4ca14.chunk.js","sourcesContent":["import { getRandom, getRangeValue, initParticleNumericAnimationValue, percentDenominator, updateAnimation, } from \"@tsparticles/engine\";\nexport class OpacityUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    async init(particle) {\n        const opacityOptions = particle.options.opacity, pxRatio = 1;\n        particle.opacity = initParticleNumericAnimationValue(opacityOptions, pxRatio);\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            particle.opacity.velocity =\n                (getRangeValue(opacityAnimation.speed) / percentDenominator) * this.container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                particle.opacity.velocity *= getRandom();\n            }\n        }\n        await Promise.resolve();\n    }\n    isEnabled(particle) {\n        const none = 0;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!particle.opacity &&\n            particle.opacity.enable &&\n            ((particle.opacity.maxLoops ?? none) <= none ||\n                ((particle.opacity.maxLoops ?? none) > none &&\n                    (particle.opacity.loops ?? none) < (particle.opacity.maxLoops ?? none))));\n    }\n    reset(particle) {\n        if (particle.opacity) {\n            particle.opacity.time = 0;\n            particle.opacity.loops = 0;\n        }\n    }\n    async update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.opacity) {\n            return;\n        }\n        updateAnimation(particle, particle.opacity, true, particle.options.opacity.animation.destroy, delta);\n        await Promise.resolve();\n    }\n}\n"],"sourceRoot":""}