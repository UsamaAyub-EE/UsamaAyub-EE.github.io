{"version":3,"sources":["../node_modules/@tsparticles/plugin-emitters/browser/EmitterShapeBase.js","../node_modules/@tsparticles/plugin-emitters/browser/index.js","../node_modules/@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShape.js","../node_modules/@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShapeGenerator.js"],"names":["EmitterShapeBase","constructor","position","size","fill","options","this","resize","async","loadEmittersPlugin","engine","refresh","arguments","length","undefined","emitterShapeManager","ShapeManager","addEmitterShapeGenerator","name","generator","_engine$emitterShapeM","addShapeGenerator","EmittersPlugin","plugin","addPlugin","randomSquareCoordinate","offset","getRandom","halfRandom","EmittersSquareShape","super","init","randomPosition","Promise","success","x","width","y","height","halfW","halfH","side","Math","floor","v","EmittersSquareShapeGenerator","generate"],"mappings":"qOAAO,MAAMA,EACTC,YAAYC,EAAUC,EAAMC,EAAMC,GAC9BC,KAAKJ,SAAWA,EAChBI,KAAKH,KAAOA,EACZG,KAAKF,KAAOA,EACZE,KAAKD,QAAUA,CACnB,CACAE,OAAOL,EAAUC,GACbG,KAAKJ,SAAWA,EAChBI,KAAKH,KAAOA,CAChB,ECVGK,eAAeC,EAAmBC,GAAwB,IAAhBC,IAAOC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACpD,IAAKF,EAAOK,oBAAqB,CAC7B,MAAM,aAAEC,SAAuB,+BAC/BN,EAAOK,oBAAsB,IAAIC,EAAaN,EAClD,CACKA,EAAOO,2BACRP,EAAOO,yBAA2B,CAACC,EAAMC,KAAc,IAAAC,EACzB,QAA1BA,EAAAV,EAAOK,2BAAmB,IAAAK,GAA1BA,EAA4BC,kBAAkBH,EAAMC,EAAU,GAGtE,MAAM,eAAEG,SAAyB,+BAA+BC,EAAS,IAAID,EAAeZ,SACtFA,EAAOc,UAAUD,EAAQZ,EACnC,C,4HCTA,SAASc,EAAuBvB,EAAUwB,GACtC,OAAOxB,EAAWwB,GAAUC,cAAcC,IAC9C,CACO,MAAMC,UAA4B7B,mBACrCC,YAAYC,EAAUC,EAAMC,EAAMC,GAC9ByB,MAAM5B,EAAUC,EAAMC,EAAMC,EAChC,CACA,UAAM0B,GACN,CACA,oBAAMC,GACF,aAAa,IAAIC,SAASC,IACtB,MAAM9B,EAAOE,KAAKF,KAAMF,EAAWI,KAAKJ,SAAUC,EAAOG,KAAKH,KAC9D,GAAIC,EACA,OAAO8B,EAAQ,CACXhC,SAAU,CACNiC,EAAGV,EAAuBvB,EAASiC,EAAGhC,EAAKiC,OAC3CC,EAAGZ,EAAuBvB,EAASmC,EAAGlC,EAAKmC,WAIlD,CACD,MAAMC,EAtBT,GAsBiBpC,EAAKiC,MAAcI,EAtBpC,GAsB4CrC,EAAKmC,OAAeG,EAAOC,KAAKC,MAtB/D,EAsBqEhB,eAAsBiB,EAtB/E,GAsBoFjB,cAAcC,KACxH,OAAQa,GACJ,KAAK,EACD,OAAOP,EAAQ,CACXhC,SAAU,CACNiC,EAAGjC,EAASiC,EAAIS,EAAIL,EACpBF,EAAGnC,EAASmC,EAAIG,KAG5B,KAAK,EACD,OAAON,EAAQ,CACXhC,SAAU,CACNiC,EAAGjC,EAASiC,EAAII,EAChBF,EAAGnC,EAASmC,EAAIO,EAAIJ,KAGhC,KAAK,EACD,OAAON,EAAQ,CACXhC,SAAU,CACNiC,EAAGjC,EAASiC,EAAIS,EAAIL,EACpBF,EAAGnC,EAASmC,EAAIG,KAI5B,QACI,OAAON,EAAQ,CACXhC,SAAU,CACNiC,EAAGjC,EAASiC,EAAII,EAChBF,EAAGnC,EAASmC,EAAIO,EAAIJ,KAIxC,IAER,ECzDG,MAAMK,EACTC,SAAS5C,EAAUC,EAAMC,EAAMC,GAC3B,OAAO,IAAIwB,EAAoB3B,EAAUC,EAAMC,EAAMC,EACzD,E","file":"static/js/31.6b96b0d6.chunk.js","sourcesContent":["export class EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        this.position = position;\n        this.size = size;\n        this.fill = fill;\n        this.options = options;\n    }\n    resize(position, size) {\n        this.position = position;\n        this.size = size;\n    }\n}\n","export async function loadEmittersPlugin(engine, refresh = true) {\n    if (!engine.emitterShapeManager) {\n        const { ShapeManager } = await import(\"./ShapeManager.js\");\n        engine.emitterShapeManager = new ShapeManager(engine);\n    }\n    if (!engine.addEmitterShapeGenerator) {\n        engine.addEmitterShapeGenerator = (name, generator) => {\n            engine.emitterShapeManager?.addShapeGenerator(name, generator);\n        };\n    }\n    const { EmittersPlugin } = await import(\"./EmittersPlugin.js\"), plugin = new EmittersPlugin(engine);\n    await engine.addPlugin(plugin, refresh);\n}\nexport * from \"./EmitterContainer.js\";\nexport * from \"./EmitterShapeBase.js\";\nexport * from \"./EmittersEngine.js\";\nexport * from \"./IEmitterShape.js\";\nexport * from \"./IEmitterShapeGenerator.js\";\nexport * from \"./Enums/EmitterClickMode.js\";\nexport * from \"./IRandomPositionData.js\";\n","import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom, halfRandom } from \"@tsparticles/engine\";\nconst half = 0.5, sides = 4, double = 2;\nfunction randomSquareCoordinate(position, offset) {\n    return position + offset * (getRandom() - halfRandom);\n}\nexport class EmittersSquareShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    async randomPosition() {\n        return await new Promise((success) => {\n            const fill = this.fill, position = this.position, size = this.size;\n            if (fill) {\n                return success({\n                    position: {\n                        x: randomSquareCoordinate(position.x, size.width),\n                        y: randomSquareCoordinate(position.y, size.height),\n                    },\n                });\n            }\n            else {\n                const halfW = size.width * half, halfH = size.height * half, side = Math.floor(getRandom() * sides), v = (getRandom() - halfRandom) * double;\n                switch (side) {\n                    case 0:\n                        return success({\n                            position: {\n                                x: position.x + v * halfW,\n                                y: position.y - halfH,\n                            },\n                        });\n                    case 1:\n                        return success({\n                            position: {\n                                x: position.x - halfW,\n                                y: position.y + v * halfH,\n                            },\n                        });\n                    case 2:\n                        return success({\n                            position: {\n                                x: position.x + v * halfW,\n                                y: position.y + halfH,\n                            },\n                        });\n                    case 3:\n                    default:\n                        return success({\n                            position: {\n                                x: position.x + halfW,\n                                y: position.y + v * halfH,\n                            },\n                        });\n                }\n            }\n        });\n    }\n}\n","import { EmittersSquareShape } from \"./EmittersSquareShape.js\";\nexport class EmittersSquareShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersSquareShape(position, size, fill, options);\n    }\n}\n"],"sourceRoot":""}